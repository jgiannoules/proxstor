package com.giannoules.proxstor.testing.generator;

import com.giannoules.proxstor.api.Environmental;
import com.giannoules.proxstor.api.EnvironmentalType;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import java.util.UUID;

public class EnvironmentalGenerator {
    
    static final String consonants = "BCDFGHJKLMNPQRSTVWXYZ";   
    static final String vowels = "AEIOU";
    static final String mixed = "-_!@#$%^&*()+";
    private final Random random;
    /*
     * uniqueness of environmental tied to environmentalType x typeIdentifier
     */
    private final Set<String> uniqueEnvironmentals;
    
    public EnvironmentalGenerator(Random random) {
        this.random = random;
        uniqueEnvironmentals = new HashSet<>();
    }
    
    public Environmental genEnvironmentals() {
        Environmental s = new Environmental();
        do {           
            EnvironmentalType st = EnvironmentalType.values()[random.nextInt(EnvironmentalType.values().length - 2) + 2];            
            s.setType(st);
            switch (s.getType()) {
                case BLE_UUID:                    
                case BT_UUID:
                    s.setIdentifier(UUID.randomUUID().toString());
                    if (s.getType() == EnvironmentalType.BLE_UUID) {
                        s.setDescription("BLE UUID " + s.getIdentifier());
                    } else {
                        s.setDescription("BT UUID " + s.getIdentifier());
                    }
                    break;          
                case WIFI_BSSID:
                case WIFI_SSID:
                    int len = random.nextInt(20) + 5;
                    StringBuilder sb = new StringBuilder();
                    sb.append(consonants.charAt(random.nextInt(consonants.length())));
                    while (len > 0) {
                        switch (random.nextInt(5)) {
                            case 0:
                                sb.append(consonants.charAt(random.nextInt(consonants.length())));
                                break;
                            case 1:
                                sb.append(vowels.charAt(random.nextInt(vowels.length())));
                                break;
                            case 2:
                                sb.append(mixed.charAt(random.nextInt(mixed.length())));
                                break;                         
                        }
                        len--;
                    }
                    s.setIdentifier(sb.toString());
                    if (s.getType() == EnvironmentalType.WIFI_BSSID) {
                        s.setDescription("WiFi BSSID " + s.getIdentifier());
                    } else {
                        s.setDescription("WiFi SSID " + s.getIdentifier());
                    }
                    break;                                                  
            }            
            /*
             * this a testing-specific misuse of the sensodId field needed to assist
             * in assigning a specific environmental "type" to locations
             * when the environmentals are actually being inserted into ProxStor the
             * real UUID will be generated by the tool and environmentalId field will be 
             * ignored and assigned on the webapi side of ProxStor
             */
            s.setEnvironmentalId(UUID.randomUUID().toString());
        } while (uniqueEnvironmentals.contains(s.getIdentifier()));
        uniqueEnvironmentals.add(s.getIdentifier());
        return s;
    }
    
}
